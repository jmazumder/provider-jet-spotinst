/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttributesObservation struct {
}

type AttributesParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type BlockDeviceMappingsEBSDynamicVolumeSizeObservation struct {
}

type BlockDeviceMappingsEBSDynamicVolumeSizeParameters struct {

	// +kubebuilder:validation:Required
	BaseSize *int64 `json:"baseSize" tf:"base_size,omitempty"`

	// +kubebuilder:validation:Required
	Resource *string `json:"resource" tf:"resource,omitempty"`

	// +kubebuilder:validation:Required
	SizePerResourceUnit *int64 `json:"sizePerResourceUnit" tf:"size_per_resource_unit,omitempty"`
}

type EcsLaunchSpecAutoscaleHeadroomsObservation struct {
}

type EcsLaunchSpecAutoscaleHeadroomsParameters struct {

	// +kubebuilder:validation:Optional
	CPUPerUnit *int64 `json:"cpuPerUnit,omitempty" tf:"cpu_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryPerUnit *int64 `json:"memoryPerUnit,omitempty" tf:"memory_per_unit,omitempty"`

	// +kubebuilder:validation:Required
	NumOfUnits *int64 `json:"numOfUnits" tf:"num_of_units,omitempty"`
}

type EcsLaunchSpecBlockDeviceMappingsEBSObservation struct {
}

type EcsLaunchSpecBlockDeviceMappingsEBSParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicVolumeSize []BlockDeviceMappingsEBSDynamicVolumeSizeParameters `json:"dynamicVolumeSize,omitempty" tf:"dynamic_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	Iops *int64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type EcsLaunchSpecBlockDeviceMappingsObservation struct {
}

type EcsLaunchSpecBlockDeviceMappingsParameters struct {

	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	EBS []EcsLaunchSpecBlockDeviceMappingsEBSParameters `json:"ebs,omitempty" tf:"ebs,omitempty"`

	// +kubebuilder:validation:Optional
	NoDevice *string `json:"noDevice,omitempty" tf:"no_device,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualName *string `json:"virtualName,omitempty" tf:"virtual_name,omitempty"`
}

type EcsLaunchSpecObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EcsLaunchSpecParameters struct {

	// +kubebuilder:validation:Optional
	Attributes []AttributesParameters `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Optional
	AutoscaleHeadrooms []EcsLaunchSpecAutoscaleHeadroomsParameters `json:"autoscaleHeadrooms,omitempty" tf:"autoscale_headrooms,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDeviceMappings []EcsLaunchSpecBlockDeviceMappingsParameters `json:"blockDeviceMappings,omitempty" tf:"block_device_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	IAMInstanceProfile *string `json:"iamInstanceProfile,omitempty" tf:"iam_instance_profile,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceTypes []*string `json:"instanceTypes,omitempty" tf:"instance_types,omitempty"`

	// +kubebuilder:validation:Required
	OceanID *string `json:"oceanId" tf:"ocean_id,omitempty"`

	// +kubebuilder:validation:Optional
	RestrictScaleDown *bool `json:"restrictScaleDown,omitempty" tf:"restrict_scale_down,omitempty"`

	// +kubebuilder:validation:Optional
	SchedulingTask []EcsLaunchSpecSchedulingTaskParameters `json:"schedulingTask,omitempty" tf:"scheduling_task,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []EcsLaunchSpecTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type EcsLaunchSpecSchedulingTaskObservation struct {
}

type EcsLaunchSpecSchedulingTaskParameters struct {

	// +kubebuilder:validation:Required
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`

	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TaskHeadroom []SchedulingTaskTaskHeadroomParameters `json:"taskHeadroom,omitempty" tf:"task_headroom,omitempty"`

	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`
}

type EcsLaunchSpecTagsObservation struct {
}

type EcsLaunchSpecTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type SchedulingTaskTaskHeadroomObservation struct {
}

type SchedulingTaskTaskHeadroomParameters struct {

	// +kubebuilder:validation:Optional
	CPUPerUnit *int64 `json:"cpuPerUnit,omitempty" tf:"cpu_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryPerUnit *int64 `json:"memoryPerUnit,omitempty" tf:"memory_per_unit,omitempty"`

	// +kubebuilder:validation:Required
	NumOfUnits *int64 `json:"numOfUnits" tf:"num_of_units,omitempty"`
}

// EcsLaunchSpecSpec defines the desired state of EcsLaunchSpec
type EcsLaunchSpecSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EcsLaunchSpecParameters `json:"forProvider"`
}

// EcsLaunchSpecStatus defines the observed state of EcsLaunchSpec.
type EcsLaunchSpecStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EcsLaunchSpecObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcsLaunchSpec is the Schema for the EcsLaunchSpecs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spotinstjet}
type EcsLaunchSpec struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsLaunchSpecSpec   `json:"spec"`
	Status            EcsLaunchSpecStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsLaunchSpecList contains a list of EcsLaunchSpecs
type EcsLaunchSpecList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcsLaunchSpec `json:"items"`
}

// Repository type metadata.
var (
	EcsLaunchSpec_Kind             = "EcsLaunchSpec"
	EcsLaunchSpec_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EcsLaunchSpec_Kind}.String()
	EcsLaunchSpec_KindAPIVersion   = EcsLaunchSpec_Kind + "." + CRDGroupVersion.String()
	EcsLaunchSpec_GroupVersionKind = CRDGroupVersion.WithKind(EcsLaunchSpec_Kind)
)

func init() {
	SchemeBuilder.Register(&EcsLaunchSpec{}, &EcsLaunchSpecList{})
}
