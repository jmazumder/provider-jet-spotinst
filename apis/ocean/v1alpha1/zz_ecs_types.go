/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlockDeviceMappingsEBSObservation struct {
}

type BlockDeviceMappingsEBSParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicVolumeSize []EBSDynamicVolumeSizeParameters `json:"dynamicVolumeSize,omitempty" tf:"dynamic_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	Iops *int64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type DownObservation struct {
}

type DownParameters struct {

	// +kubebuilder:validation:Optional
	MaxScaleDownPercentage *float64 `json:"maxScaleDownPercentage,omitempty" tf:"max_scale_down_percentage,omitempty"`
}

type EBSDynamicVolumeSizeObservation struct {
}

type EBSDynamicVolumeSizeParameters struct {

	// +kubebuilder:validation:Required
	BaseSize *int64 `json:"baseSize" tf:"base_size,omitempty"`

	// +kubebuilder:validation:Required
	Resource *string `json:"resource" tf:"resource,omitempty"`

	// +kubebuilder:validation:Required
	SizePerResourceUnit *int64 `json:"sizePerResourceUnit" tf:"size_per_resource_unit,omitempty"`
}

type EcsAutoscalerObservation struct {
}

type EcsAutoscalerParameters struct {

	// +kubebuilder:validation:Optional
	AutoHeadroomPercentage *int64 `json:"autoHeadroomPercentage,omitempty" tf:"auto_headroom_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	Cooldown *int64 `json:"cooldown,omitempty" tf:"cooldown,omitempty"`

	// +kubebuilder:validation:Optional
	Down []DownParameters `json:"down,omitempty" tf:"down,omitempty"`

	// +kubebuilder:validation:Optional
	Headroom []HeadroomParameters `json:"headroom,omitempty" tf:"headroom,omitempty"`

	// +kubebuilder:validation:Optional
	IsAutoConfig *bool `json:"isAutoConfig,omitempty" tf:"is_auto_config,omitempty"`

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceLimits []EcsAutoscalerResourceLimitsParameters `json:"resourceLimits,omitempty" tf:"resource_limits,omitempty"`
}

type EcsAutoscalerResourceLimitsObservation struct {
}

type EcsAutoscalerResourceLimitsParameters struct {

	// +kubebuilder:validation:Optional
	MaxMemoryGib *int64 `json:"maxMemoryGib,omitempty" tf:"max_memory_gib,omitempty"`

	// +kubebuilder:validation:Optional
	MaxVcpu *int64 `json:"maxVcpu,omitempty" tf:"max_vcpu,omitempty"`
}

type EcsBlockDeviceMappingsObservation struct {
}

type EcsBlockDeviceMappingsParameters struct {

	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	EBS []BlockDeviceMappingsEBSParameters `json:"ebs,omitempty" tf:"ebs,omitempty"`

	// +kubebuilder:validation:Optional
	NoDevice *string `json:"noDevice,omitempty" tf:"no_device,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualName *string `json:"virtualName,omitempty" tf:"virtual_name,omitempty"`
}

type EcsInstanceMetadataOptionsObservation struct {
}

type EcsInstanceMetadataOptionsParameters struct {

	// +kubebuilder:validation:Optional
	HTTPPutResponseHopLimit *int64 `json:"httpPutResponseHopLimit,omitempty" tf:"http_put_response_hop_limit,omitempty"`

	// +kubebuilder:validation:Required
	HTTPTokens *string `json:"httpTokens" tf:"http_tokens,omitempty"`
}

type EcsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EcsParameters struct {

	// +kubebuilder:validation:Optional
	AssociatePublicIPAddress *bool `json:"associatePublicIpAddress,omitempty" tf:"associate_public_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	Autoscaler []EcsAutoscalerParameters `json:"autoscaler,omitempty" tf:"autoscaler,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDeviceMappings []EcsBlockDeviceMappingsParameters `json:"blockDeviceMappings,omitempty" tf:"block_device_mappings,omitempty"`

	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	DesiredCapacity *int64 `json:"desiredCapacity,omitempty" tf:"desired_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	DrainingTimeout *int64 `json:"drainingTimeout,omitempty" tf:"draining_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	EBSOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized,omitempty"`

	// +kubebuilder:validation:Optional
	IAMInstanceProfile *string `json:"iamInstanceProfile,omitempty" tf:"iam_instance_profile,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceMetadataOptions []EcsInstanceMetadataOptionsParameters `json:"instanceMetadataOptions,omitempty" tf:"instance_metadata_options,omitempty"`

	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// +kubebuilder:validation:Optional
	MaxSize *int64 `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// +kubebuilder:validation:Optional
	MinSize *int64 `json:"minSize,omitempty" tf:"min_size,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring *bool `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Optional
	OptimizeImages []OptimizeImagesParameters `json:"optimizeImages,omitempty" tf:"optimize_images,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledTask []EcsScheduledTaskParameters `json:"scheduledTask,omitempty" tf:"scheduled_task,omitempty"`

	// +kubebuilder:validation:Required
	SecurityGroupIds []*string `json:"securityGroupIds" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SpotPercentage *int64 `json:"spotPercentage,omitempty" tf:"spot_percentage,omitempty"`

	// +kubebuilder:validation:Required
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []EcsTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatePolicy []EcsUpdatePolicyParameters `json:"updatePolicy,omitempty" tf:"update_policy,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// +kubebuilder:validation:Optional
	UtilizeCommitments *bool `json:"utilizeCommitments,omitempty" tf:"utilize_commitments,omitempty"`

	// +kubebuilder:validation:Optional
	UtilizeReservedInstances *bool `json:"utilizeReservedInstances,omitempty" tf:"utilize_reserved_instances,omitempty"`

	// +kubebuilder:validation:Optional
	Whitelist []*string `json:"whitelist,omitempty" tf:"whitelist,omitempty"`
}

type EcsScheduledTaskObservation struct {
}

type EcsScheduledTaskParameters struct {

	// +kubebuilder:validation:Optional
	ShutdownHours []ScheduledTaskShutdownHoursParameters `json:"shutdownHours,omitempty" tf:"shutdown_hours,omitempty"`

	// +kubebuilder:validation:Optional
	Tasks []ScheduledTaskTasksParameters `json:"tasks,omitempty" tf:"tasks,omitempty"`
}

type EcsTagsObservation struct {
}

type EcsTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type EcsUpdatePolicyObservation struct {
}

type EcsUpdatePolicyParameters struct {

	// +kubebuilder:validation:Optional
	AutoApplyTags *bool `json:"autoApplyTags,omitempty" tf:"auto_apply_tags,omitempty"`

	// +kubebuilder:validation:Optional
	ConditionedRoll *bool `json:"conditionedRoll,omitempty" tf:"conditioned_roll,omitempty"`

	// +kubebuilder:validation:Optional
	RollConfig []EcsUpdatePolicyRollConfigParameters `json:"rollConfig,omitempty" tf:"roll_config,omitempty"`

	// +kubebuilder:validation:Required
	ShouldRoll *bool `json:"shouldRoll" tf:"should_roll,omitempty"`
}

type EcsUpdatePolicyRollConfigObservation struct {
}

type EcsUpdatePolicyRollConfigParameters struct {

	// +kubebuilder:validation:Required
	BatchSizePercentage *int64 `json:"batchSizePercentage" tf:"batch_size_percentage,omitempty"`
}

type HeadroomObservation struct {
}

type HeadroomParameters struct {

	// +kubebuilder:validation:Optional
	CPUPerUnit *int64 `json:"cpuPerUnit,omitempty" tf:"cpu_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryPerUnit *int64 `json:"memoryPerUnit,omitempty" tf:"memory_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	NumOfUnits *int64 `json:"numOfUnits,omitempty" tf:"num_of_units,omitempty"`
}

type OptimizeImagesObservation struct {
}

type OptimizeImagesParameters struct {

	// +kubebuilder:validation:Required
	PerformAt *string `json:"performAt" tf:"perform_at,omitempty"`

	// +kubebuilder:validation:Required
	ShouldOptimizeEcsAMI *bool `json:"shouldOptimizeEcsAmi" tf:"should_optimize_ecs_ami,omitempty"`

	// +kubebuilder:validation:Optional
	TimeWindows []*string `json:"timeWindows,omitempty" tf:"time_windows,omitempty"`
}

type ScheduledTaskShutdownHoursObservation struct {
}

type ScheduledTaskShutdownHoursParameters struct {

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Required
	TimeWindows []*string `json:"timeWindows" tf:"time_windows,omitempty"`
}

type ScheduledTaskTasksObservation struct {
}

type ScheduledTaskTasksParameters struct {

	// +kubebuilder:validation:Required
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`

	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`
}

// EcsSpec defines the desired state of Ecs
type EcsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EcsParameters `json:"forProvider"`
}

// EcsStatus defines the observed state of Ecs.
type EcsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EcsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ecs is the Schema for the Ecss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spotinstjet}
type Ecs struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsSpec   `json:"spec"`
	Status            EcsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsList contains a list of Ecss
type EcsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ecs `json:"items"`
}

// Repository type metadata.
var (
	Ecs_Kind             = "Ecs"
	Ecs_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ecs_Kind}.String()
	Ecs_KindAPIVersion   = Ecs_Kind + "." + CRDGroupVersion.String()
	Ecs_GroupVersionKind = CRDGroupVersion.WithKind(Ecs_Kind)
)

func init() {
	SchemeBuilder.Register(&Ecs{}, &EcsList{})
}
