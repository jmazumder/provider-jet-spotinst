/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoscaleHeadroomsObservation struct {
}

type AutoscaleHeadroomsParameters struct {

	// +kubebuilder:validation:Optional
	CPUPerUnit *int64 `json:"cpuPerUnit,omitempty" tf:"cpu_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	GpuPerUnit *int64 `json:"gpuPerUnit,omitempty" tf:"gpu_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryPerUnit *int64 `json:"memoryPerUnit,omitempty" tf:"memory_per_unit,omitempty"`

	// +kubebuilder:validation:Required
	NumOfUnits *int64 `json:"numOfUnits" tf:"num_of_units,omitempty"`
}

type AwsLaunchSpecObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AwsLaunchSpecParameters struct {

	// +kubebuilder:validation:Optional
	AssociatePublicIPAddress *bool `json:"associatePublicIpAddress,omitempty" tf:"associate_public_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	AutoscaleHeadrooms []AutoscaleHeadroomsParameters `json:"autoscaleHeadrooms,omitempty" tf:"autoscale_headrooms,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDeviceMappings []BlockDeviceMappingsParameters `json:"blockDeviceMappings,omitempty" tf:"block_device_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	CreateOptions []CreateOptionsParameters `json:"createOptions,omitempty" tf:"create_options,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteOptions []DeleteOptionsParameters `json:"deleteOptions,omitempty" tf:"delete_options,omitempty"`

	// +kubebuilder:validation:Optional
	ElasticIPPool []ElasticIPPoolParameters `json:"elasticIpPool,omitempty" tf:"elastic_ip_pool,omitempty"`

	// +kubebuilder:validation:Optional
	IAMInstanceProfile *string `json:"iamInstanceProfile,omitempty" tf:"iam_instance_profile,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceTypes []*string `json:"instanceTypes,omitempty" tf:"instance_types,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []LabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	OceanID *string `json:"oceanId" tf:"ocean_id,omitempty"`

	// +kubebuilder:validation:Optional
	PreferredSpotTypes []*string `json:"preferredSpotTypes,omitempty" tf:"preferred_spot_types,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceLimits []AwsLaunchSpecResourceLimitsParameters `json:"resourceLimits,omitempty" tf:"resource_limits,omitempty"`

	// +kubebuilder:validation:Optional
	RestrictScaleDown *bool `json:"restrictScaleDown,omitempty" tf:"restrict_scale_down,omitempty"`

	// +kubebuilder:validation:Optional
	RootVolumeSize *int64 `json:"rootVolumeSize,omitempty" tf:"root_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	SchedulingShutdownHours []SchedulingShutdownHoursParameters `json:"schedulingShutdownHours,omitempty" tf:"scheduling_shutdown_hours,omitempty"`

	// +kubebuilder:validation:Optional
	SchedulingTask []SchedulingTaskParameters `json:"schedulingTask,omitempty" tf:"scheduling_task,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	Strategy []AwsLaunchSpecStrategyParameters `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []AwsLaunchSpecTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Taints []TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatePolicy []AwsLaunchSpecUpdatePolicyParameters `json:"updatePolicy,omitempty" tf:"update_policy,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type AwsLaunchSpecResourceLimitsObservation struct {
}

type AwsLaunchSpecResourceLimitsParameters struct {

	// +kubebuilder:validation:Optional
	MaxInstanceCount *int64 `json:"maxInstanceCount,omitempty" tf:"max_instance_count,omitempty"`

	// +kubebuilder:validation:Optional
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count,omitempty"`
}

type AwsLaunchSpecStrategyObservation struct {
}

type AwsLaunchSpecStrategyParameters struct {

	// +kubebuilder:validation:Optional
	SpotPercentage *int64 `json:"spotPercentage,omitempty" tf:"spot_percentage,omitempty"`
}

type AwsLaunchSpecTagsObservation struct {
}

type AwsLaunchSpecTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type AwsLaunchSpecUpdatePolicyObservation struct {
}

type AwsLaunchSpecUpdatePolicyParameters struct {

	// +kubebuilder:validation:Optional
	RollConfig []UpdatePolicyRollConfigParameters `json:"rollConfig,omitempty" tf:"roll_config,omitempty"`

	// +kubebuilder:validation:Required
	ShouldRoll *bool `json:"shouldRoll" tf:"should_roll,omitempty"`
}

type BlockDeviceMappingsObservation struct {
}

type BlockDeviceMappingsParameters struct {

	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	EBS []EBSParameters `json:"ebs,omitempty" tf:"ebs,omitempty"`

	// +kubebuilder:validation:Optional
	NoDevice *string `json:"noDevice,omitempty" tf:"no_device,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualName *string `json:"virtualName,omitempty" tf:"virtual_name,omitempty"`
}

type CreateOptionsObservation struct {
}

type CreateOptionsParameters struct {

	// +kubebuilder:validation:Required
	InitialNodes *int64 `json:"initialNodes" tf:"initial_nodes,omitempty"`
}

type DeleteOptionsObservation struct {
}

type DeleteOptionsParameters struct {

	// +kubebuilder:validation:Required
	ForceDelete *bool `json:"forceDelete" tf:"force_delete,omitempty"`
}

type DynamicVolumeSizeObservation struct {
}

type DynamicVolumeSizeParameters struct {

	// +kubebuilder:validation:Required
	BaseSize *int64 `json:"baseSize" tf:"base_size,omitempty"`

	// +kubebuilder:validation:Required
	Resource *string `json:"resource" tf:"resource,omitempty"`

	// +kubebuilder:validation:Required
	SizePerResourceUnit *int64 `json:"sizePerResourceUnit" tf:"size_per_resource_unit,omitempty"`
}

type EBSObservation struct {
}

type EBSParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicVolumeSize []DynamicVolumeSizeParameters `json:"dynamicVolumeSize,omitempty" tf:"dynamic_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	Iops *int64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type ElasticIPPoolObservation struct {
}

type ElasticIPPoolParameters struct {

	// +kubebuilder:validation:Optional
	TagSelector []TagSelectorParameters `json:"tagSelector,omitempty" tf:"tag_selector,omitempty"`
}

type LabelsObservation struct {
}

type LabelsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type SchedulingShutdownHoursObservation struct {
}

type SchedulingShutdownHoursParameters struct {

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Required
	TimeWindows []*string `json:"timeWindows" tf:"time_windows,omitempty"`
}

type SchedulingTaskObservation struct {
}

type SchedulingTaskParameters struct {

	// +kubebuilder:validation:Required
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`

	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TaskHeadroom []TaskHeadroomParameters `json:"taskHeadroom,omitempty" tf:"task_headroom,omitempty"`

	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`
}

type TagSelectorObservation struct {
}

type TagSelectorParameters struct {

	// +kubebuilder:validation:Required
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`

	// +kubebuilder:validation:Optional
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type TaintsObservation struct {
}

type TaintsParameters struct {

	// +kubebuilder:validation:Required
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type TaskHeadroomObservation struct {
}

type TaskHeadroomParameters struct {

	// +kubebuilder:validation:Optional
	CPUPerUnit *int64 `json:"cpuPerUnit,omitempty" tf:"cpu_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	GpuPerUnit *int64 `json:"gpuPerUnit,omitempty" tf:"gpu_per_unit,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryPerUnit *int64 `json:"memoryPerUnit,omitempty" tf:"memory_per_unit,omitempty"`

	// +kubebuilder:validation:Required
	NumOfUnits *int64 `json:"numOfUnits" tf:"num_of_units,omitempty"`
}

type UpdatePolicyRollConfigObservation struct {
}

type UpdatePolicyRollConfigParameters struct {

	// +kubebuilder:validation:Required
	BatchSizePercentage *int64 `json:"batchSizePercentage" tf:"batch_size_percentage,omitempty"`
}

// AwsLaunchSpecSpec defines the desired state of AwsLaunchSpec
type AwsLaunchSpecSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AwsLaunchSpecParameters `json:"forProvider"`
}

// AwsLaunchSpecStatus defines the observed state of AwsLaunchSpec.
type AwsLaunchSpecStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AwsLaunchSpecObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AwsLaunchSpec is the Schema for the AwsLaunchSpecs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spotinstjet}
type AwsLaunchSpec struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AwsLaunchSpecSpec   `json:"spec"`
	Status            AwsLaunchSpecStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AwsLaunchSpecList contains a list of AwsLaunchSpecs
type AwsLaunchSpecList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AwsLaunchSpec `json:"items"`
}

// Repository type metadata.
var (
	AwsLaunchSpec_Kind             = "AwsLaunchSpec"
	AwsLaunchSpec_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AwsLaunchSpec_Kind}.String()
	AwsLaunchSpec_KindAPIVersion   = AwsLaunchSpec_Kind + "." + CRDGroupVersion.String()
	AwsLaunchSpec_GroupVersionKind = CRDGroupVersion.WithKind(AwsLaunchSpec_Kind)
)

func init() {
	SchemeBuilder.Register(&AwsLaunchSpec{}, &AwsLaunchSpecList{})
}
