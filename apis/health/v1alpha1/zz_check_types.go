/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CheckCheckObservation struct {
}

type CheckCheckParameters struct {

	// +kubebuilder:validation:Optional
	EndPoint *string `json:"endPoint,omitempty" tf:"end_point,omitempty"`

	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	Healthy *int64 `json:"healthy" tf:"healthy,omitempty"`

	// +kubebuilder:validation:Required
	Interval *int64 `json:"interval" tf:"interval,omitempty"`

	// +kubebuilder:validation:Required
	Port *int64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	TimeOut *int64 `json:"timeOut,omitempty" tf:"time_out,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// +kubebuilder:validation:Required
	Unhealthy *int64 `json:"unhealthy" tf:"unhealthy,omitempty"`
}

type CheckObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CheckParameters struct {

	// +kubebuilder:validation:Optional
	Check []CheckCheckParameters `json:"check,omitempty" tf:"check,omitempty"`

	// +kubebuilder:validation:Required
	ProxyAddress *string `json:"proxyAddress" tf:"proxy_address,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyPort *int64 `json:"proxyPort,omitempty" tf:"proxy_port,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// CheckSpec defines the desired state of Check
type CheckSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CheckParameters `json:"forProvider"`
}

// CheckStatus defines the observed state of Check.
type CheckStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Check is the Schema for the Checks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spotinstjet}
type Check struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CheckSpec   `json:"spec"`
	Status            CheckStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckList contains a list of Checks
type CheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Check `json:"items"`
}

// Repository type metadata.
var (
	Check_Kind             = "Check"
	Check_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Check_Kind}.String()
	Check_KindAPIVersion   = Check_Kind + "." + CRDGroupVersion.String()
	Check_GroupVersionKind = CRDGroupVersion.WithKind(Check_Kind)
)

func init() {
	SchemeBuilder.Register(&Check{}, &CheckList{})
}
