/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsSuspensionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AwsSuspensionParameters struct {

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Required
	Suspension []SuspensionParameters `json:"suspension" tf:"suspension,omitempty"`
}

type SuspensionObservation struct {
}

type SuspensionParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// AwsSuspensionSpec defines the desired state of AwsSuspension
type AwsSuspensionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AwsSuspensionParameters `json:"forProvider"`
}

// AwsSuspensionStatus defines the observed state of AwsSuspension.
type AwsSuspensionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AwsSuspensionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AwsSuspension is the Schema for the AwsSuspensions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spotinstjet}
type AwsSuspension struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AwsSuspensionSpec   `json:"spec"`
	Status            AwsSuspensionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AwsSuspensionList contains a list of AwsSuspensions
type AwsSuspensionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AwsSuspension `json:"items"`
}

// Repository type metadata.
var (
	AwsSuspension_Kind             = "AwsSuspension"
	AwsSuspension_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AwsSuspension_Kind}.String()
	AwsSuspension_KindAPIVersion   = AwsSuspension_Kind + "." + CRDGroupVersion.String()
	AwsSuspension_GroupVersionKind = CRDGroupVersion.WithKind(AwsSuspension_Kind)
)

func init() {
	SchemeBuilder.Register(&AwsSuspension{}, &AwsSuspensionList{})
}
