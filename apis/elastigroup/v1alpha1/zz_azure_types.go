/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdditionalIPConfigsObservation struct {
}

type AdditionalIPConfigsParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIPVersion *string `json:"privateIpVersion,omitempty" tf:"private_ip_version,omitempty"`
}

type AzureIntegrationKubernetesObservation struct {
}

type AzureIntegrationKubernetesParameters struct {

	// +kubebuilder:validation:Required
	ClusterIdentifier *string `json:"clusterIdentifier" tf:"cluster_identifier,omitempty"`
}

type AzureIntegrationMultaiRuntimeObservation struct {
}

type AzureIntegrationMultaiRuntimeParameters struct {

	// +kubebuilder:validation:Required
	DeploymentID *string `json:"deploymentId" tf:"deployment_id,omitempty"`
}

type AzureObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AzureParameters struct {

	// +kubebuilder:validation:Optional
	CustomData *string `json:"customData,omitempty" tf:"custom_data,omitempty"`

	// +kubebuilder:validation:Optional
	DesiredCapacity *int64 `json:"desiredCapacity,omitempty" tf:"desired_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// +kubebuilder:validation:Optional
	Image []ImageParameters `json:"image,omitempty" tf:"image,omitempty"`

	// +kubebuilder:validation:Optional
	IntegrationKubernetes []AzureIntegrationKubernetesParameters `json:"integrationKubernetes,omitempty" tf:"integration_kubernetes,omitempty"`

	// +kubebuilder:validation:Optional
	IntegrationMultaiRuntime []AzureIntegrationMultaiRuntimeParameters `json:"integrationMultaiRuntime,omitempty" tf:"integration_multai_runtime,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancers []LoadBalancersParameters `json:"loadBalancers,omitempty" tf:"load_balancers,omitempty"`

	// +kubebuilder:validation:Optional
	Login []LoginParameters `json:"login,omitempty" tf:"login,omitempty"`

	// +kubebuilder:validation:Required
	LowPrioritySizes []*string `json:"lowPrioritySizes" tf:"low_priority_sizes,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedServiceIdentities []ManagedServiceIdentitiesParameters `json:"managedServiceIdentities,omitempty" tf:"managed_service_identities,omitempty"`

	// +kubebuilder:validation:Optional
	MaxSize *int64 `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// +kubebuilder:validation:Optional
	MinSize *int64 `json:"minSize,omitempty" tf:"min_size,omitempty"`

	// +kubebuilder:validation:Required
	Network []NetworkParameters `json:"network" tf:"network,omitempty"`

	// +kubebuilder:validation:Required
	OdSizes []*string `json:"odSizes" tf:"od_sizes,omitempty"`

	// +kubebuilder:validation:Required
	Product *string `json:"product" tf:"product,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingDownPolicy []AzureScalingDownPolicyParameters `json:"scalingDownPolicy,omitempty" tf:"scaling_down_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingUpPolicy []AzureScalingUpPolicyParameters `json:"scalingUpPolicy,omitempty" tf:"scaling_up_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledTask []AzureScheduledTaskParameters `json:"scheduledTask,omitempty" tf:"scheduled_task,omitempty"`

	// +kubebuilder:validation:Optional
	ShutdownScript *string `json:"shutdownScript,omitempty" tf:"shutdown_script,omitempty"`

	// +kubebuilder:validation:Required
	Strategy []AzureStrategyParameters `json:"strategy" tf:"strategy,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatePolicy []AzureUpdatePolicyParameters `json:"updatePolicy,omitempty" tf:"update_policy,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type AzureScalingDownPolicyDimensionsObservation struct {
}

type AzureScalingDownPolicyDimensionsParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureScalingDownPolicyObservation struct {
}

type AzureScalingDownPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// +kubebuilder:validation:Optional
	Adjustment *string `json:"adjustment,omitempty" tf:"adjustment,omitempty"`

	// +kubebuilder:validation:Optional
	Cooldown *int64 `json:"cooldown,omitempty" tf:"cooldown,omitempty"`

	// +kubebuilder:validation:Optional
	Dimensions []AzureScalingDownPolicyDimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	EvaluationPeriods *int64 `json:"evaluationPeriods,omitempty" tf:"evaluation_periods,omitempty"`

	// +kubebuilder:validation:Optional
	MaxTargetCapacity *string `json:"maxTargetCapacity,omitempty" tf:"max_target_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	Maximum *string `json:"maximum,omitempty" tf:"maximum,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Optional
	MinTargetCapacity *string `json:"minTargetCapacity,omitempty" tf:"min_target_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	Minimum *string `json:"minimum,omitempty" tf:"minimum,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// +kubebuilder:validation:Optional
	Period *int64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`

	// +kubebuilder:validation:Optional
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// +kubebuilder:validation:Required
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type AzureScalingUpPolicyDimensionsObservation struct {
}

type AzureScalingUpPolicyDimensionsParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureScalingUpPolicyObservation struct {
}

type AzureScalingUpPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// +kubebuilder:validation:Optional
	Adjustment *string `json:"adjustment,omitempty" tf:"adjustment,omitempty"`

	// +kubebuilder:validation:Optional
	Cooldown *int64 `json:"cooldown,omitempty" tf:"cooldown,omitempty"`

	// +kubebuilder:validation:Optional
	Dimensions []AzureScalingUpPolicyDimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	EvaluationPeriods *int64 `json:"evaluationPeriods,omitempty" tf:"evaluation_periods,omitempty"`

	// +kubebuilder:validation:Optional
	MaxTargetCapacity *string `json:"maxTargetCapacity,omitempty" tf:"max_target_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	Maximum *string `json:"maximum,omitempty" tf:"maximum,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Optional
	MinTargetCapacity *string `json:"minTargetCapacity,omitempty" tf:"min_target_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	Minimum *string `json:"minimum,omitempty" tf:"minimum,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// +kubebuilder:validation:Optional
	Period *int64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`

	// +kubebuilder:validation:Optional
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// +kubebuilder:validation:Required
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type AzureScheduledTaskObservation struct {
}

type AzureScheduledTaskParameters struct {

	// +kubebuilder:validation:Optional
	Adjustment *string `json:"adjustment,omitempty" tf:"adjustment,omitempty"`

	// +kubebuilder:validation:Optional
	AdjustmentPercentage *string `json:"adjustmentPercentage,omitempty" tf:"adjustment_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	BatchSizePercentage *string `json:"batchSizePercentage,omitempty" tf:"batch_size_percentage,omitempty"`

	// +kubebuilder:validation:Required
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`

	// +kubebuilder:validation:Optional
	GracePeriod *string `json:"gracePeriod,omitempty" tf:"grace_period,omitempty"`

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleMaxCapacity *string `json:"scaleMaxCapacity,omitempty" tf:"scale_max_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleMinCapacity *string `json:"scaleMinCapacity,omitempty" tf:"scale_min_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleTargetCapacity *string `json:"scaleTargetCapacity,omitempty" tf:"scale_target_capacity,omitempty"`

	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`
}

type AzureStrategyObservation struct {
}

type AzureStrategyParameters struct {

	// +kubebuilder:validation:Optional
	DrainingTimeout *int64 `json:"drainingTimeout,omitempty" tf:"draining_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	LowPriorityPercentage *int64 `json:"lowPriorityPercentage,omitempty" tf:"low_priority_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	OdCount *int64 `json:"odCount,omitempty" tf:"od_count,omitempty"`
}

type AzureUpdatePolicyObservation struct {
}

type AzureUpdatePolicyParameters struct {

	// +kubebuilder:validation:Optional
	RollConfig []UpdatePolicyRollConfigParameters `json:"rollConfig,omitempty" tf:"roll_config,omitempty"`

	// +kubebuilder:validation:Required
	ShouldRoll *bool `json:"shouldRoll" tf:"should_roll,omitempty"`
}

type CustomObservation struct {
}

type CustomParameters struct {

	// +kubebuilder:validation:Required
	ImageName *string `json:"imageName" tf:"image_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

type HealthCheckObservation struct {
}

type HealthCheckParameters struct {

	// +kubebuilder:validation:Optional
	AutoHealing *bool `json:"autoHealing,omitempty" tf:"auto_healing,omitempty"`

	// +kubebuilder:validation:Optional
	GracePeriod *int64 `json:"gracePeriod,omitempty" tf:"grace_period,omitempty"`

	// +kubebuilder:validation:Required
	HealthCheckType *string `json:"healthCheckType" tf:"health_check_type,omitempty"`
}

type ImageObservation struct {
}

type ImageParameters struct {

	// +kubebuilder:validation:Optional
	Custom []CustomParameters `json:"custom,omitempty" tf:"custom,omitempty"`

	// +kubebuilder:validation:Optional
	Marketplace []MarketplaceParameters `json:"marketplace,omitempty" tf:"marketplace,omitempty"`
}

type LoadBalancersObservation struct {
}

type LoadBalancersParameters struct {

	// +kubebuilder:validation:Optional
	AutoWeight *bool `json:"autoWeight,omitempty" tf:"auto_weight,omitempty"`

	// +kubebuilder:validation:Optional
	BalancerID *string `json:"balancerId,omitempty" tf:"balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	TargetSetID *string `json:"targetSetId,omitempty" tf:"target_set_id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LoginObservation struct {
}

type LoginParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	SSHPublicKey *string `json:"sshPublicKey,omitempty" tf:"ssh_public_key,omitempty"`

	// +kubebuilder:validation:Required
	UserName *string `json:"userName" tf:"user_name,omitempty"`
}

type ManagedServiceIdentitiesObservation struct {
}

type ManagedServiceIdentitiesParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

type MarketplaceObservation struct {
}

type MarketplaceParameters struct {

	// +kubebuilder:validation:Required
	Offer *string `json:"offer" tf:"offer,omitempty"`

	// +kubebuilder:validation:Required
	Publisher *string `json:"publisher" tf:"publisher,omitempty"`

	// +kubebuilder:validation:Required
	Sku *string `json:"sku" tf:"sku,omitempty"`
}

type NetworkObservation struct {
}

type NetworkParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalIPConfigs []AdditionalIPConfigsParameters `json:"additionalIpConfigs,omitempty" tf:"additional_ip_configs,omitempty"`

	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SubnetName *string `json:"subnetName" tf:"subnet_name,omitempty"`

	// +kubebuilder:validation:Required
	VirtualNetworkName *string `json:"virtualNetworkName" tf:"virtual_network_name,omitempty"`
}

type UpdatePolicyRollConfigObservation struct {
}

type UpdatePolicyRollConfigParameters struct {

	// +kubebuilder:validation:Required
	BatchSizePercentage *int64 `json:"batchSizePercentage" tf:"batch_size_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	GracePeriod *int64 `json:"gracePeriod,omitempty" tf:"grace_period,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`
}

// AzureSpec defines the desired state of Azure
type AzureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AzureParameters `json:"forProvider"`
}

// AzureStatus defines the observed state of Azure.
type AzureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AzureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Azure is the Schema for the Azures API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spotinstjet}
type Azure struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AzureSpec   `json:"spec"`
	Status            AzureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AzureList contains a list of Azures
type AzureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Azure `json:"items"`
}

// Repository type metadata.
var (
	Azure_Kind             = "Azure"
	Azure_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Azure_Kind}.String()
	Azure_KindAPIVersion   = Azure_Kind + "." + CRDGroupVersion.String()
	Azure_GroupVersionKind = CRDGroupVersion.WithKind(Azure_Kind)
)

func init() {
	SchemeBuilder.Register(&Azure{}, &AzureList{})
}
